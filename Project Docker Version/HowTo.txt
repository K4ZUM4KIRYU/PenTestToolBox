Windows System :

Building a Docker image for your Python application on a Windows system involves several steps. I'll guide you through the process, from setting up your project to writing the Dockerfile and building the image. Here’s a general approach:

1. Install Docker
First, ensure Docker Desktop is installed and running on your Windows system. You can download it from the official Docker website " https://www.docker.com/products/docker-desktop/ "

2. Prepare Your Python Application
Make sure your Python application is ready for containerization. This includes:

Having a Python script or application written and tested.
A requirements.txt file listing all the dependencies, which can be generated using pip freeze > requirements.txt if you don't have one.

3. Create a Dockerfile
A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Here’s an 2 examples Dockerfile for a typical Python application with and without requirements.txt file (please look at the Docker File directory to find the dockerfile that needs to be used to build the image):


Dockerfile (without requiremetns.txt, needs to manually add the dependecies)
==============================================================================================================================
# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Install Nmap and any other necessary dependencies
RUN apt-get update && apt-get install -y nmap

# Install the python-nmap package
RUN pip install python-nmap

# Copy the current directory contents into the container at /app
COPY . .

# Install any needed Python dependencies
RUN pip install --no-cache-dir paramiko tqdm prettytable fpdf colorama requests beautifulsoup4

# Run main.py when the container launches
CMD ["python", "main.py"]

==============================================================================================================================

Dockerfile (with a requirements.txt that includes all required dependencies)
==============================================================================================================================
# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /app

# Install Nmap and any other necessary dependencies
RUN apt-get update && apt-get install -y nmap

# Install the python-nmap package
RUN pip install python-nmap

# Copy the current directory contents into the container at /app
COPY . .

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Run main.py when the container launches
CMD ["python", "main.py"]

==============================================================================================================================

4. Building Your Docker Image
Navigate to the directory containing your application and Dockerfile in the command prompt or PowerShell, and run the following command to build the Docker image:

docker build -t evilcyberbuncker.
This command will use the Dockerfile to build a new Docker image tagged as your-app-name, in our case the app name is : evilcyberbuncker.

5. Running Your Docker Container
After the image is built, you can run your application inside a Docker container with:

docker run -it evilcyberbuncker

6. Verifying the Application
You can run the following command to check if the program is built as an image on Docker:

docker images
