import paramiko
import getpass
from tqdm import tqdm
from fpdf import FPDF
import os
import json

def list_directories(ip, username, password):
    # Initialize SSH client
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    directories = []
    
    try:
        # Connect to the target system
        client.connect(ip, username=username, password=password)
        
        # Command to list directories recursively
        command = 'find / -type d'
        stdin, stdout, stderr = client.exec_command(command)
        
        # Read all directories and count them for the progress bar
        directories = stdout.readlines()
        total_directories = len(directories)
        
        # Display progress as directories are processed
        print("Enumerating directories:")
        for directory in tqdm(directories, total=total_directories, unit='dirs'):
            print(directory.strip())
        
    except Exception as e:
        print(f"Failed to connect or execute command: {str(e)}")
    finally:
        client.close()
    
    return directories

def save_report(data, file_format, file_name, directory_path):
    """Generate and save a report with headers and wrapped text in PDF format."""
    file_path = os.path.join(directory_path, file_name + '.' + file_format)
    os.makedirs(directory_path, exist_ok=True)
    
    if file_format == 'json':
        with open(file_path, 'w') as file:
            json.dump({'directories': data}, file, indent=4)
    elif file_format == 'txt':
        with open(file_path, 'w') as file:
            for directory in data:
                file.write(f"{directory.strip()}\n")
    elif file_format == 'pdf':
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(200, 10, 'SSH Directory Enumeration Report', 0, 1, 'C')
        pdf.set_font("Arial", size=12)
        
        for directory in data:
            directory = directory.strip()
            effective_page_width = pdf.w - 2*pdf.l_margin
            pdf.multi_cell(effective_page_width, 10, directory)
        
        pdf.output(file_path)

def dir_sub_enum():
    # User inputs
    target_ip = input("Enter the target IP address: ")
    username = input("Enter the SSH username: ")
    password = getpass.getpass("Enter the SSH password: ")
    
    # List directories with a progress indicator
    directories = list_directories(target_ip, username, password)
    
    # Adding user input and save report section
    file_format = input("Enter the file format (txt, json, pdf): ").lower()
    if file_format not in ['txt', 'json', 'pdf']:
        print("Invalid format selected. Defaulting to txt.")
        file_format = 'txt'
    file_name = input("Enter the filename without extension: ")
    directory_path = input("Enter the directory path where you want to save the file: ")

    # Ensure the directory path is not empty
    while not directory_path:
        print("Directory path cannot be empty.")
        directory_path = input("Please enter a valid directory path where you want to save the file: ")

    # Try creating the directory if it doesn't exist
    try:
        os.makedirs(directory_path, exist_ok=True)
    except OSError as error:
        print(f"Error creating directory: {error}")
        return  # Exit the function if the directory cannot be created
    
    # Save the report based on the user's choice
    save_report(directories, file_format, file_name, directory_path)
