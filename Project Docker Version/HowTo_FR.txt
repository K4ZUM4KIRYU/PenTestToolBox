Système Windows :

Construire une image Docker pour votre application Python sur un système Windows comprend plusieurs étapes. Je vais vous guider tout au long du processus, depuis la préparation de votre projet jusqu'à la rédaction du Dockerfile et la construction de l'image. Voici une approche générale :

1. Installer Docker
Tout d'abord, assurez-vous que Docker Desktop est installé et en fonction sur votre système Windows. Vous pouvez le télécharger depuis le site officiel de Docker : "https://www.docker.com/products/docker-desktop/"

2. Préparer votre application Python
Assurez-vous que votre application Python est prête pour la conteneurisation. Cela inclut :

Avoir un script ou une application Python écrit et testé.
Un fichier requirements.txt listant toutes les dépendances, qui peut être généré en utilisant pip freeze > requirements.txt si vous n'en avez pas.

3.Créer un Dockerfile
Un Dockerfile est un document texte qui contient toutes les commandes qu'un utilisateur pourrait appeler sur la ligne de commande pour assembler une image. 
Voici 2 exemples de Dockerfile pour une application Python typique, avec et sans fichier requirements.txt (veuillez consulter le répertoire Docker File pour trouver le dockerfile qui doit être utilisé pour construire l'image) :

==============================================================================================================================
Dockerfile (sans fichier requirements.txt, nécessite l'ajout manuel des dépendances)
Utilisez une image parente officielle Python comme image parente
FROM python:3.9-slim

Définissez le répertoire de travail dans le conteneur
WORKDIR /app

Installez Nmap et toutes les autres dépendances nécessaires
RUN apt-get update && apt-get install -y nmap

Installez le package python-nmap
RUN pip install python-nmap

Copiez le contenu du répertoire courant dans le conteneur à l'adresse /app
COPY . .

Installez toutes les dépendances Python nécessaires
RUN pip install --no-cache-dir paramiko tqdm prettytable fpdf colorama requests beautifulsoup4

Exécutez main.py lorsque le conteneur se lance
CMD ["python", "main.py"]

==============================================================================================================================

Dockerfile (avec un fichier requirements.txt qui inclut toutes les dépendances requises)
Utilisez une image parente officielle Python comme image parente
FROM python:3.9-slim

Définissez le répertoire de travail dans le conteneur
WORKDIR /app

Installez Nmap et toutes les autres dépendances nécessaires
RUN apt-get update && apt-get install -y nmap

Installez le package python-nmap
RUN pip install python-nmap

Copiez le contenu du répertoire courant dans le conteneur à l'adresse /app
COPY . .

Installez tous les packages nécessaires spécifiés dans requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

Exécutez main.py lorsque le conteneur se lance
CMD ["python", "main.py"]

==============================================================================================================================

4. Construire votre image Docker
Naviguez jusqu'au répertoire contenant votre application et Dockerfile dans l'invite de commande ou PowerShell, et exécutez la commande suivante pour construire l'image Docker :

docker build -t evilcyberbuncker.
Cette commande utilisera le Dockerfile pour construire une nouvelle image Docker taguée avec le nom de votre application, dans notre cas le nom de l'application est : evilcyberbuncker.

5.Exécuter votre conteneur Docker
Après la construction de l'image, vous pouvez exécuter votre application dans un conteneur Docker avec :

docker run -it evilcyberbuncker

6. Vérifier l'application
Vous pouvez exécuter la commande suivante pour vérifier si le programme est construit comme une image sur Docker :

docker images
