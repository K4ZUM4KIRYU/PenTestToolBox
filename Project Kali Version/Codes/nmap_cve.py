import nmap
import threading
import time
import json
import os
from fpdf import FPDF

# Flag to indicate scan completion
scan_complete = False

def scan_target(target_ip, min_cvss, results_list):
    global scan_complete
    nm = nmap.PortScanner()
    
    # Construct arguments string including vulners script with user-defined CVSS
    scan_args = f'-Pn -p 1-65535 -sV --script vulners --script-args mincvss={min_cvss}'
    
    # Start the scan with the constructed arguments
    nm.scan(hosts=target_ip, arguments=scan_args)
    
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                port_info = nm[host][proto][port]
                if 'script' in port_info and 'vulners' in port_info['script']:
                    results_list.append({
                        'Host': host,
                        'Protocol': proto,
                        'Port': port,
                        'Service': port_info.get("name", ""),
                        'Vulnerabilities': port_info['script']['vulners']
                    })
    
    scan_complete = True

def progress_indicator():
    global scan_complete
    animation = "|/-\\"
    idx = 0
    while not scan_complete:
        print(f'\rScanning {animation[idx % len(animation)]}', end='')
        time.sleep(0.1)
        idx += 1
    print('\rScan complete!               ')

def save_report(data, file_format, file_name, directory_path):
    """Generate a report from fetched data and save it to a specific location in the chosen format."""
    file_path = os.path.join(directory_path, file_name + '.' + file_format)
    os.makedirs(directory_path, exist_ok=True)
    if file_format == 'json':
        with open(file_path, 'w') as file:
            json.dump(data, file, indent=4)
    elif file_format == 'txt':
        with open(file_path, 'w') as file:
            for entry in data:
                file.write(f"Host: {entry['Host']}, Protocol: {entry['Protocol']}, Port: {entry['Port']}, Service: {entry['Service']}, Vulnerabilities: {entry['Vulnerabilities']}\n")
    elif file_format == 'pdf':
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", 'B', 12)
        
        # Define the column widths
        column_widths = {'host': 30, 'protocol': 20, 'port': 20, 'service': 30, 'vulnerabilities': 90}
        
        # Header
        pdf.cell(column_widths['host'], 10, 'Host', 1, 0, 'C')
        pdf.cell(column_widths['protocol'], 10, 'Protocol', 1, 0, 'C')
        pdf.cell(column_widths['port'], 10, 'Port', 1, 0, 'C')
        pdf.cell(column_widths['service'], 10, 'Service', 1, 0, 'C')
        pdf.cell(column_widths['vulnerabilities'], 10, 'Vulnerabilities', 1, 1, 'C')

        pdf.set_font("Arial", size=10)
        
        # Data rows
        for entry in data:
            pdf.set_font("Arial", size=10)
            pdf.cell(column_widths['host'], 10, entry['Host'], 1, 0, 'C')
            pdf.cell(column_widths['protocol'], 10, entry['Protocol'], 1, 0, 'C')
            pdf.cell(column_widths['port'], 10, str(entry['Port']), 1, 0, 'C')
            pdf.cell(column_widths['service'], 10, entry['Service'], 1, 0, 'C')
            
            # Handle long vulnerabilities text
            vulnerability_text = entry['Vulnerabilities'].replace(',', ', ')
            pdf.set_font("Arial", size=8)  # Smaller font size for potentially long text
            pdf.multi_cell(column_widths['vulnerabilities'], 10, vulnerability_text, 1, 'L')
        
        pdf.output(file_path)

def run_nmap_cve_analysis():
    target_ip = input("Enter target IP address: ")
    min_cvss = input("Enter minimum CVSS score for vulnerability detection: ")
    results_list = []

    # Start the scanner thread with additional argument for min_cvss
    scanner_thread = threading.Thread(target=scan_target, args=(target_ip, min_cvss, results_list))
    scanner_thread.start()
    
    # Start the progress indicator
    progress_indicator()
    
    # Wait for the scanner thread to finish
    scanner_thread.join()

    # Save report
    file_format = input("Enter the file format (txt, json, pdf): ").lower()
    if file_format not in ['txt', 'json', 'pdf']:
        print("Invalid format selected. Defaulting to txt.")
        file_format = 'txt'
    file_name = input("Enter the filename without extension: ")
    directory_path = input("Enter the directory path where you want to save the file: ")
    save_report(results_list, file_format, file_name, directory_path)

